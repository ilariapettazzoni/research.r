22/01/24
Statistics and Data Analysis

#Exercise 1 

n=10
a=0
g=0
h=0


for(i in 1:50) {v1=runif(n,1,100)
 arit=mean(v1)
 geom=prod(v1)^(1/length(v1))
 harmo=1/mean(1/v1)
 M=c(arit,geom,harmo)
 if (arit==max(M)) a=a+1
if (geom==max(M)) g=g+1
if (harmo==max(M)) h=h+1
}
a
g
h

#Exercise 2a
mean(1:4)+mean(1:6)+mean(1:8)+mean(1:10)+mean(1:12)+mean(1:20) #beacuse they are independent



#Exercise 2b
v=1:15
cards=v[v!=14]
cards
card.densities = c(rep(4/54,13),2/54)
card.densities
sum(card.densities)
sum(cards*card.densities)

23/01/24
#Exercise 3

n=10
integral.means=numeric()  #to create an empty vector that will contain numerical variables
actual.means=numeric()
for(i in 1:5){
sigman=seq(from=1, to=n, by=10^(-i))                                      # create a decomposition composed of smaller steps
yk=numeric()                                                              #select a random point                                       
for(y in 1:(length(sigman)-1)) yk=c(yk,runif(1,sigman[y],sigman[y+1]))   
fln=(log(vector)/vector)
riemann.sum=ln*(10^(-i)) 
integral.means=c(integral.means,sum(riemann.sum/(n-1)))
actual.means=c(actual.means, mean(fln))
}
#_____________________

v1=runif(100,0,10)
quantile(v1,probs=0.25,type=8)
#_____________________

v1=runif(10,1,10)
m=mean(v1)
v=sum((v1-m)^2/10)
v
var(v1)
#_____________________
install.packages("ggplot2movies")
library(ggplot2movies)
?movies
dim(movies)
colnames(movies)
movies[sample(c(1:dim(movies)[1]),size =20),1:2]

movies.subsample= movies[movies$votes>9999,]
movies.subsample= movies[movies$Documentary==0,]
movies.subsample= movies[movies$Short==0,]

hist(movies.subsample$rating,col="lightblue",breaks=7,freq=FALSE) #freq change the y axis
mean(movies.subsample$rating)
sd(movies.subsample$rating)

mu=0
sigma=1
xs=seq(from=-4,to=4,by=0.1)
ys=1/(sigma*sqrt(2*pi))*exp(-((xs-mu)^2)/(2*sigma^2))
plot(xs,ys,type="1",xlab="",ylab="",main=paste("Normal distribution(mean=",mu,",sd=",sigma,")",sep=""))           #?????
plot( xs, ys, type="1", xlab=" ", ylab=" ", main=paste("Normal distribution("mean=",mu,",sd=",sigma,")",sep=""))  #?????
#______

getwd()
#import data
setwd("/Users/ilari/Desktop/")
data=read.table("alkfos.txt", header=T)

#fromR to your PC
write.table(data,file="pippo.txt")

#save a copy of the whole workspace
save.image(file="my.workspace.RData")

#to save the history
savehistory("ppp.txt")  #???

load("my.workspace.RData")

#PCA______________________________

install.packages("ade4")
library(ade4)
dudi.pca(df, row.w = rep(1, nrow(df))/nrow(df), 
    col.w = rep(1, ncol(df)), center = TRUE, scale = TRUE, 
    scannf = TRUE, nf = 2)  #center and scale is used to specify if you want to normalize the data making all the variables numerically homogeneous



data=read.csv("usair.csv")
pca1=dudi.pca(data[,-1], center = TRUE, scale = TRUE)
pca1$eig
perc.eig=100*pca1$eig/sum(pca1$eig) #percentege of variance between each operation
perc.eig
cumsum()

pca1$li
plot(pca1$li[,1],pca1$li[,2], xlab="PC1",ylab="PC2")

plot(pca1$li[,1],pca1$li[,2], xlab="PC1",ylab="PC2",type="n")    #without dots
text(pca1$li[,1], pca1$li[,2], labels=rownames(data),cex=0.6)   # add name to an existing(empty) plot, cex regulates the dimension of text

s.label(pca1$li,xax=1,yax=2, label=abbreviate(row.names(data)))  #plots directly with labels

add.scatter.eig(pca1$eig,nf=4, xax=1,yax=2,pos="bottomleft")       
#nf= number of PC that i have to retain #add.scatter.eig adds to our plot a barplot with the variance is expalined by each of our PC


s.corcircle(pca1$c1,xax=1,yax=2)  #correlation circle betweem pc and original values #the longest the arrow the stronger the correlation,the direction indicates if the corr is positive or negative withpc1 and pc2(look at the axis)
